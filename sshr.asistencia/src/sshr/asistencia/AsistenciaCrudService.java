package sshr.asistencia;import sshr.domainmodel.BaseEntity;import sshr.datamodel.EntityManagerException;import sshr.servicemodel.GenericCrudServiceException;import sshr.servicemodel.CrudService;import sshr.servicemodel.BaseService;import sshr.eventmodel.BaseEvent;import sshr.eventmodel.DummyEvent;import sshr.eventmodel.EventHandler;import sshr.eventmodel.EventFactory;import sshr.eventmodel.EventValidationException;import java.util.List;public final class AsistenciaCrudService extends BaseService implements CrudService {	private static AsistenciaEntityManager _entityManager;		static {		try {				_entityManager = new AsistenciaEntityManager();				_evtHandlers.put( AsistenciaCrudEventHandler.INSTANCE.getEvtHandlerID(), AsistenciaCrudEventHandler.INSTANCE );				} catch (Exception ex) {					System.out.println("***************************** ERROR: AsistenciaCrudService[static]");					ex.printStackTrace();		}	}		@Override	public <T extends BaseEntity> T add(T entity) throws GenericCrudServiceException {			try {				return _entityManager.add(entity);				} catch (EntityManagerException e) {							throw new GenericCrudServiceException(e);		}	}		@Override	public <T extends BaseEntity> T update(T entity) throws GenericCrudServiceException {			return null;	}	@Override	public <T extends BaseEntity> void remove(T entity) throws GenericCrudServiceException { }	@Override	public <T extends BaseEntity, U extends Number> T find(Class<T> eClass, U id) throws GenericCrudServiceException {			try {				//DummyEvent evt = EventFactory.getNewEvent( DummyEvent.class, this, AsistenciaCrudEventHandler.INSTANCE.getEvtHandlerID() );								//fireEvent( evt );								return _entityManager.find(eClass, id);		} catch (Exception ex) {					ex.printStackTrace();		}			return null;	}	@Override	public <T extends BaseEntity> List<T> findAll(Class<T> entityClass) throws GenericCrudServiceException {			try {				return _entityManager.performQuery( AsistenciaQueryCatalog.GENERIC___ALL(), entityClass );						} catch (EntityManagerException ex) {					throw new GenericCrudServiceException("", ex);		}	}	}