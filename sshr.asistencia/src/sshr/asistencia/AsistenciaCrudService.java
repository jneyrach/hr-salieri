package sshr.asistencia;import sshr.domainmodel.*;import sshr.datamodel.*;import sshr.servicemodel.*;import sshr.eventmodel.*;import java.util.*;public final class AsistenciaCrudService extends BaseService implements CrudService {	private static AsistenciaEntityManager _entityManager;	static {		try {				_entityManager = new AsistenciaEntityManager();				_evtHandlers.put( AsistenciaCrudEventHandler.INSTANCE.getEvtHandlerID(), AsistenciaCrudEventHandler.INSTANCE );		} catch (Exception ex) { }	}	@Override	public <T extends BaseEntity> T add(T entity) throws GenericCrudServiceException {		try {				entity.setCreatedOn(GregorianCalendar.getInstance().getTime());				entity.setUpdatedOn(GregorianCalendar.getInstance().getTime());						return _entityManager.add(entity);		} catch (EntityManagerException e) {					throw new GenericCrudServiceException(e);		}	}	@Override	public <T extends BaseEntity> T update(T entity) throws GenericCrudServiceException {		try {				entity.setUpdatedOn(GregorianCalendar.getInstance().getTime());								return _entityManager.update(entity);		} catch (EntityManagerException e) {					throw new GenericCrudServiceException(e);		}	}	@Override	public <T extends BaseEntity, U extends Number> void remove(Class<T> eClass, U id) throws GenericCrudServiceException { 		try {				_entityManager.remove(eClass, id);		} catch (EntityManagerException e) {					throw new GenericCrudServiceException(e);		}	}	@Override	public <T extends BaseEntity, U extends Number> T find(Class<T> eClass, U id) throws GenericCrudServiceException {		try {				//DummyEvent evt = EventFactory.getNewEvent( DummyEvent.class, this, AsistenciaCrudEventHandler.INSTANCE.getEvtHandlerID() );				//fireEvent( evt );				return _entityManager.find(eClass, id);		} catch (Exception ex) {					ex.printStackTrace();		}		return null;	}	@Override	public <T extends BaseEntity> List<T> findAll(Class<T> entityClass) throws GenericCrudServiceException {		try {				return _entityManager.performQuery( AsistenciaQueryCatalog.GENERIC___ALL(), entityClass );		} catch (EntityManagerException ex) {					throw new GenericCrudServiceException("", ex);		}	}}