#import "{..}/include/StringUtils.groovy"
#import "{..}/include/PackageUtils.groovy"

#set (projectName = "sshr.domainmodel")
#set (className = "PerfilHorarioByPeriodoAsistencia")
#set (packageName = "sshr.domainmodel.asistencia")
#set (importsSSHR = ["sshr.domainmodel.BaseEntity", "sshr.domainmodel.EntityAccessNotAllowedException"])
#set (importsJava = ["java.util.*", "javax.xml.bind.annotation.*"])
#set (idDataType = "Long")
#set (properties = [
                    {name: "ID"                     dataType: "{idDataType}"},
                    {name: "Periodo de Asistencia"  dataType: "PeriodoAsistencia"},
                    {name: "Perfil de Horario"      dataType: "PerfilHorario"}
                   ])
#set (auxComma = "")
#set (stringUtils = new StringUtils())
#set (packageUtils = new PackageUtils())
#set (packageFolderName = packageUtils.createDirectoryPackage(packageName))
#set (destinationDirectory = "../../{projectName}/src/{packageFolderName}/")
#set (dir = new java.io.File(destinationDirectory))
#set (a = dir.mkdirs())


#write "{destinationDirectory}{className}.java"
    package {packageName};
  
    #foreach (import in importsSSHR)
    import {import};
    #end
    
    #foreach (import in importsJava)
    import {import};
    #end

    #foreach (import in importsOther)
    import {import};
    #end

    
    @XmlRootElement
    public final class {className} extends BaseEntity<{idDataType}> {

        #foreach (field in properties)
        private {field.dataType} {stringUtils.getPropertyDeclarationString(field.name)};
        #end
    
    
        @XmlTransient
        public enum FIELDS {
        
            #foreach (field in properties)
            {auxComma}{stringUtils.getFieldDeclarationString(field.name)}() {
                public String getName() { return "{stringUtils.getPropertyDeclarationString(field.name)}"; }
            }
            #set (auxComma = ",")
            #end
            ;
        }
    
        private {className}() throws EntityAccessNotAllowedException {

            super();
        }
    
        #foreach (field in properties)
        
        public {field.dataType} {stringUtils.getFieldGetterDeclarationString(field.name)}() {
            
            return this.{stringUtils.getPropertyDeclarationString(field.name)};
        }
        #end

        
        #foreach (field in properties)
        
        public void {stringUtils.getFieldSetterDeclarationString(field.name)}({field.dataType} newValue) {
            
            this.{stringUtils.getPropertyDeclarationString(field.name)} = newValue;
        }
        #end
        
    }
#end
