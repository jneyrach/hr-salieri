package sshr.datamodel.jpa;import sshr.datamodel.NoDataFoundException;import sshr.datamodel.EntityManagerException;import sshr.datamodel.NoSingleResultException;import sshr.datamodel.NoSingleResultException;import java.util.List;import java.util.ArrayList;import java.util.Properties;import javax.persistence.Query;import javax.persistence.Persistence;import javax.persistence.EntityManager;import javax.persistence.EntityTransaction;import javax.persistence.EntityManagerFactory;public final class JPAEntityManager {	static EntityManager        _entityManager;	static EntityTransaction    _entityTransaction;	static EntityManagerFactory _entityManagerFactory;		// The initialization of static section	static {		try {	            Properties properties = new Properties();	            properties.load( Thread.currentThread().getContextClassLoader().getResource("datamodel.properties").openStream() );					_entityManagerFactory = Persistence.createEntityManagerFactory( properties.get("JPAPersistenceUnit").toString() );				_entityManager        = _entityManagerFactory == null ? null: _entityManagerFactory.createEntityManager();				_entityTransaction    = _entityManager == null ? null : _entityManager.getTransaction();						} catch (Exception ex) { }	}	// The transaction methods	public static synchronized boolean beginEntityTransaction() throws EntityManagerException {			if (_entityTransaction == null)					throw new EntityManagerException("Not in transaction");				else if (!_entityTransaction.isActive())						_entityTransaction.begin();					return true;	}		public static synchronized void commitEntityTransaction() throws EntityManagerException {			if (_entityTransaction.isActive())					_entityTransaction.commit();		else					throw new EntityManagerException("Not in Transaction!");	}		public static void rollbackEntityTransaction() {		if (_entityTransaction.isActive())					_entityTransaction.rollback();	}			// Creation of Query objects	public static synchronized Query createEBJQuery(String qryText) {			return _entityManager.createQuery(qryText);	}		public static synchronized Query createNativeSQL(String sqlStr) {			return _entityManager.createNativeQuery(sqlStr);	}		public static Query getNamedQuery(String qryName) {			return _entityManager.createNamedQuery(qryName);	}			// Entities crud	public static synchronized <T extends BaseDataEntity> T createEntity(T entity) throws EntityManagerException {				if (_entityManager == null) throw new EntityManagerException("Not connected to any data source.");				if (_entityTransaction.isActive())			try {					_entityManager.persist(entity);			} catch (Exception ex) {									throw new EntityManagerException(ex);			}		else			try {					_entityTransaction.begin();					_entityManager.persist(entity);					_entityTransaction.commit();                			} catch (Exception ex) {									if (_entityTransaction.isActive()) _entityTransaction.rollback();						throw new EntityManagerException(ex);			}								return entity;	}        	public static synchronized <T extends BaseDataEntity> T updateEntity(T entity) throws EntityManagerException {			if (_entityManager == null) throw new EntityManagerException("No se ha establecido la conexión a la base de datos. 'EntityManager' no se ha instanciado.");				if (_entityTransaction.isActive())			try {					_entityManager.merge(entity);			} catch (Exception ex) {						throw new EntityManagerException(ex);			}		else			try {					_entityTransaction.begin();					_entityManager.merge(entity);					_entityTransaction.commit();                			} catch (Exception ex) {						if (_entityTransaction.isActive()) _entityTransaction.rollback();						throw new EntityManagerException(ex);			}									return entity;	}        	public static synchronized <T extends BaseDataEntity> void deleteEntity(T entity) throws EntityManagerException {			if (_entityManager == null) throw new EntityManagerException("No se ha establecido la conexión a la base de datos. 'EntityManager' no se ha instanciado.");				if (_entityTransaction.isActive())			try {					_entityManager.remove(entity);			} catch (Exception ex) {									throw new EntityManagerException(ex);			}		else			try {					_entityTransaction.begin();										_entityManager.remove(entity);					_entityTransaction.commit();                			} catch (Exception ex) {									if (_entityTransaction.isActive()) _entityTransaction.rollback();						throw new EntityManagerException(ex);			}	}        	public static synchronized <T extends BaseDataEntity, U extends Number> T getEntityByID(Class<T> eClass, U id) throws NoDataFoundException, EntityManagerException {			if (_entityManager == null) throw new EntityManagerException("No se ha establecido la conexión a la base de datos. 'EntityManager' no se ha instanciado.");				try {				Object o = _entityManager.getReference(eClass, id);								if (o == null) throw new NoDataFoundException("EntityManager hasn't found any entity of kind '" + eClass.getName() + "' with ID: '" + id.toString() + "'.");								return (T)o;					} catch (NoDataFoundException ex) {							throw new NoDataFoundException(ex);						} catch (Exception ex) {							throw new EntityManagerException(ex);		}		}		// Query entities by query definitions	public static synchronized <T extends BaseDataEntity> List<T> getListByQueryObject(Query qryDef, Class<T> clazz) throws NoDataFoundException, EntityManagerException {			if (_entityManager == null) throw new EntityManagerException("No se ha establecido la conexión a la base de datos. 'EntityManager' no se ha instanciado.");				List<T> qryResult = new ArrayList<T>();				try {				beginEntityTransaction();							qryResult.addAll( qryDef.getResultList() );								if (qryResult.isEmpty()) throw new NoDataFoundException("EntityManager no encontro registros asociados a la consulta '" + qryDef.toString() + "'.");								_entityManager.clear();								commitEntityTransaction();								return qryResult;					} catch (NoDataFoundException ex) {						rollbackEntityTransaction();								throw new NoDataFoundException(ex);		} catch (Exception ex) {						rollbackEntityTransaction();								throw new EntityManagerException(ex);		}		}	public static synchronized <T extends BaseDataEntity> T getSingleResultByQueryObject(Query qryDef, Class<T> clazz) throws NoDataFoundException, EntityManagerException, NoSingleResultException {			if (_entityManager == null) throw new EntityManagerException("No se ha establecido la conexión a la base de datos. 'EntityManager' no se ha instanciado.");				List<T> qryResult = new ArrayList<T>();				try {				beginEntityTransaction();							qryResult.addAll( qryDef.getResultList() );				if (qryResult.size() > 1) throw new NoSingleResultException("Cannot return one only object, the query returned " + qryResult.size() + " objects.");								if (qryResult.isEmpty()) throw new NoDataFoundException("No records found for the query '" + qryDef.toString() + "'.");												_entityManager.clear();								commitEntityTransaction();								return (T)qryResult.get(0);					} catch (NoSingleResultException ex) {							rollbackEntityTransaction();										throw new NoSingleResultException(ex);		} catch (NoDataFoundException ex) {							rollbackEntityTransaction();										throw new NoDataFoundException(ex);		} catch (Exception ex) {							rollbackEntityTransaction();										throw new EntityManagerException(ex);		}		}}