package sshr.asistencia;import java.util.*;import sshr.domainmodel.*;import sshr.domainmodel.asistencia.*;import sshr.asistencia.*;public final class AsistenciaApplication {	private static AsistenciaCrudService _crudService;		static {		try {				_crudService = new AsistenciaCrudService();				} catch (Exception ex) { }	}		/*		SECTION: CRUD - BEGIN			*/		public static PerfilHorario createPerfilHorario( String codigo, String nombre, String descripcion) throws AsistenciaException {					try {					PerfilHorario e = EntityFactory.getNewEntity(PerfilHorario.class);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);					e = _crudService.add( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de crear un registro de la clase PerfilHorario.");                        					return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}	        		public static PerfilHorario updatePerfilHorario( Long id, String codigo, String nombre, String descripcion) throws AsistenciaException {					try {					PerfilHorario e = _crudService.find(PerfilHorario.class, id);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);										e = _crudService.update( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de actualizar un registro de la clase PerfilHorario.");																	return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static List<PerfilHorario> findAllPerfilHorario() throws AsistenciaException {					try {					return _crudService.findAll(PerfilHorario.class);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static PerfilHorario findPerfilHorario(Long id) throws AsistenciaException {					try {					return _crudService.find(PerfilHorario.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static void removePerfilHorario(Long id) throws AsistenciaException {					try {					_crudService.remove(PerfilHorario.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}    		public static PeriodoAsistencia createPeriodoAsistencia( String codigo, String nombre, String descripcion, Date fechaDeInicio, Date fechaDeTermino) throws AsistenciaException {					try {					PeriodoAsistencia e = EntityFactory.getNewEntity(PeriodoAsistencia.class);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);                    e.setFechaDeInicio(fechaDeInicio);                    e.setFechaDeTermino(fechaDeTermino);					e = _crudService.add( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de crear un registro de la clase PeriodoAsistencia.");                        					return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}	        		public static PeriodoAsistencia updatePeriodoAsistencia( Long id, String codigo, String nombre, String descripcion, Date fechaDeInicio, Date fechaDeTermino) throws AsistenciaException {					try {					PeriodoAsistencia e = _crudService.find(PeriodoAsistencia.class, id);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);                    e.setFechaDeInicio(fechaDeInicio);                    e.setFechaDeTermino(fechaDeTermino);										e = _crudService.update( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de actualizar un registro de la clase PeriodoAsistencia.");																	return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static List<PeriodoAsistencia> findAllPeriodoAsistencia() throws AsistenciaException {					try {					return _crudService.findAll(PeriodoAsistencia.class);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static PeriodoAsistencia findPeriodoAsistencia(Long id) throws AsistenciaException {					try {					return _crudService.find(PeriodoAsistencia.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static void removePeriodoAsistencia(Long id) throws AsistenciaException {					try {					_crudService.remove(PeriodoAsistencia.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}        		public static TipoDia createTipoDia( String codigo, String nombre, String descripcion) throws AsistenciaException {					try {					TipoDia e = EntityFactory.getNewEntity(TipoDia.class);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);					e = _crudService.add( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de crear un registro de la clase TipoDia.");                        					return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}	        		public static TipoDia updateTipoDia( Long id, String codigo, String nombre, String descripcion) throws AsistenciaException {					try {					TipoDia e = _crudService.find(TipoDia.class, id);                    e.setCodigo(codigo);                    e.setNombre(nombre);                    e.setDescripcion(descripcion);										e = _crudService.update( e );					if (e == null) 						throw new AsistenciaException("ERROR: Al tratar de actualizar un registro de la clase TipoDia.");																	return e;								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static List<TipoDia> findAllTipoDia() throws AsistenciaException {					try {					return _crudService.findAll(TipoDia.class);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static TipoDia findTipoDia(Long id) throws AsistenciaException {					try {					return _crudService.find(TipoDia.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}		public static void removeTipoDia(Long id) throws AsistenciaException {					try {					_crudService.remove(TipoDia.class, id);								} catch (Exception ex) { 									throw new AsistenciaException("An error has occurred, please review the log.", ex);			}		}	/*		SECTION: CRUD - END			*/}